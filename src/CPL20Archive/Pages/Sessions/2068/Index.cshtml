@page
@model CPL20Archive.Pages.Sessions._2068.IndexModel
@{
}
    <div class="top-title-area bg-img-charcoal-eticket">
      <div class="container">
        <h1 class="title-page">Session Details</h1>
      </div>
    </div>
    <div class="gap"></div>
    <div class="container">
      <div class="row">
        <div class="span3">
          <aside class="sidebar-left">
            <br />
            <h5 class="SessionDetails">Topic(s)</h5>
           <a asp-page="/Sessions/Topic_AppDev">Application Development</a><br />
            <br />
          </aside>
        </div>
        <div class="span9">
          <h2 id="MainContent_MainContent_SessionTitle" class="SessionDetails">Great On Their Own, Even Better Together: Application Development with Python, Typer, and Poetry</h2>
          <h5 id="MainContent_MainContent_SessionType" class="SessionDetails">Regular Session</h5>
          <br />
          Have you ever tried to create a command-line application with an extensive command-line interface and then upload it to to the Python Package Index (PyPI)? If your experience is like mine, then you might have found the process confusing because there are so many different tools and configurations from which to choose! The good news is that there is a "sweet spot" that this presentation will introduce: using Typer to create the command-line interface and Poetry to manage application dependencies and virtual environments and upload the project to PyPI. Software developers who follow the steps outlined in this talk will be able to quickly and repeatably create command-line applications in Python that are available for everyone to install and use through programs like pip and pipx.

After briefly overviewing the challenges associated with other approaches to creating and uploading Python-based command-line applications, this presentation will introduce the key ideas behind the use of both Typer and Poetry. The presentation will then explain each command that a software developer must use to start a Python project with Poetry and to install dependencies like the Typer package. Along with sketching the idea for an application that has a command-line interface and showing how to implement it in Typer, the talk will explain how to use Poetry to upload the application to PyPI and use pipx to install and run it in an isolated environment. People who watch this talk will gain the knowledge that they need to easily create full-fledged command-line applications in Python.

Summary of what people will learn after attending this session:

- The challenges associated with using alternative programs for interface creation and packaging
- How to use Poetry to create a Python package for a program with a command-line interface
- The way in which Typer connects a function's type annotations to a program's command-line interface
- Examples of the commands needed to complete each project step, from creation and building to publishing on PyPI
- The common pitfalls associated with using Typer and Poetry and easy-to-follow steps for resolving them

          <hr />
          <div class="row row-wrap">
            <div class="span3">
              <div class="thumb center">
                <div class="thumb-header">
                  <a class="hover-img" href="http://codepalousa.com/SpeakerDetails/00645C11-DCF4-457B-AC8B-E78DE0734340">
                    <img src="https://greeneventstechnology.azureedge.net/cpl20/speakers/Gregory_Kapfhammer.png" alt="Gregory Kapfhammer" title="Gregory Kapfhammer" />
                  </a>
                </div>
                <div class="thumb-caption">
                  <h5 class="thumb-title"><a href="http://codepalousa.com/SpeakerDetails/00645C11-DCF4-457B-AC8B-E78DE0734340">Gregory Kapfhammer</a></h5>
                  <p class="thumb-meta"><br /></p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="gap"></div>
    </div>
