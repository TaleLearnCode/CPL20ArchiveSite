@page
@model CPL20Archive.Pages.Sessions._1772.IndexModel
@{
}
    <div class="top-title-area bg-img-charcoal-eticket">
      <div class="container">
        <h1 class="title-page">Session Details</h1>
      </div>
    </div>
    <div class="gap"></div>
    <div class="container">
      <div class="row">
        <div class="span3">
          <aside class="sidebar-left">
            <br />
            <h5 class="SessionDetails">Topic(s)</h5>
           
            <br />
            <h5 class="SessionDetails">Tags</h5>
           <a href="/SessionsByTag/40">Microservices</a><br /><a href="/SessionsByTag/46">Architecture</a><br />
            <br />
          </aside>
        </div>
        <div class="span9">
          <h2 id="MainContent_MainContent_SessionTitle" class="SessionDetails">Effective Microservice Communication and Conversation Patterns</h2>
          <h5 id="MainContent_MainContent_SessionType" class="SessionDetails">Regular Session</h5>
          <br />
          <div class="smart-player-embed-container">
            <iframe class="smart-player-embed-iframe" id="embeddedSmartPlayerInstance" src="~/sessions/1772/player.html" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
          </div>
          Orchestration or choreography? Sagas or process manager? REST, RPC, or events? Are we just making this all up as we go along?

Microservices introduce major complexities the moment we move away from a single service and process to multiple ones. Immediately, the problem hits: services have to communicate. The architect mandates REST. But nothing works in production. Then come events. But nothing is ever completed. So now what?

Let’s look at the problem holistically: We want to uphold the fundamental autonomy of any microservice-based architecture while designing a communication strategy that enables services to achieve their purpose in the world.

That’s where patterns come in. In this talk, we’ll look at some basic communication patterns, see where we might run into problems and how advanced conversational patterns can help. We’ll walk you through some real-world scenarios to demonstrate how complex coordination and conversation patterns can get services communicating effectively while retaining our all-important autonomy and loose coupling.

          <hr />
          <div class="row row-wrap">
            <div class="span3">
              <div class="thumb center">
                <div class="thumb-header">
                  <a class="hover-img" href="http://codepalousa.com/SpeakerDetails/75144148-0E1D-438A-B70B-3F514CC846F1">
                    <img src="https://greeneventstechnology.azureedge.net/cpl20/speakers/Jimmy_Bogard.png" alt="Jimmy Bogard" title="Jimmy Bogard" />
                  </a>
                </div>
                <div class="thumb-caption">
                  <h5 class="thumb-title"><a href="http://codepalousa.com/SpeakerDetails/75144148-0E1D-438A-B70B-3F514CC846F1">Jimmy Bogard</a></h5>
                  <p class="thumb-meta"><br /></p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="gap"></div>
    </div>
