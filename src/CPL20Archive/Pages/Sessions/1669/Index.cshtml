@page
@model CPL20Archive.Pages.Sessions._1669.IndexModel
@{
}
    <div class="top-title-area bg-img-charcoal-eticket">
      <div class="container">
        <h1 class="title-page">Session Details</h1>
      </div>
    </div>
    <div class="gap"></div>
    <div class="container">
      <div class="row">
        <div class="span3">
          <aside class="sidebar-left">
            <br />
            <h5 class="SessionDetails">Topic(s)</h5>
           
            <br />
            <h5 class="SessionDetails">Tags</h5>
           <a asp-page="/Sessions/DotNet">.NET</a><br /><a asp-page="/Sessions/Testing">Testing</a><br />
            <br />
          </aside>
        </div>
        <div class="span9">
          <h2 id="MainContent_MainContent_SessionTitle" class="SessionDetails">Unit-Testing With Ease</h2>
          <h5 id="MainContent_MainContent_SessionType" class="SessionDetails">Regular Session</h5>
          <br />
          <div class="smart-player-embed-container">
            <iframe class="smart-player-embed-iframe" id="embeddedSmartPlayerInstance" src="~/sessions/1669/player.html" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
          </div>
          Do you want to skip all the setup ceremony and get straight to the actual testing when writing unit tests? Leveraging dependency injection and IoC makes it a breeze to build solutions that are modular and testable, but building out those dependency chains in our unit tests can leave them cluttered and overly complex. It's time to learn to embrace the magic of IoC, DI, and mocking to lower the friction of writing and maintaining unit tests. Taking cues from the open-source library Ease, you can see how to tap into the life-cycle of unit testing frameworks and integrate it with an IoC container to give you a fresh start for each test. Throw in a little mocking and a flexible pattern for managing setup and now you are testing in high gear! A great side-effect of using Ease, or a similar methodology, is that tests become more resilient against changes in the dependencies that are not a direct concern of the test, so you end up breaking fewer tests and changing less test code. What are you waiting for? Stop the ceremony, and start testing!
          <hr />
          <div class="row row-wrap">
            <div class="span3">
              <div class="thumb center">
                <div class="thumb-header">
                  <a class="hover-img" href="http://codepalousa.com/SpeakerDetails/77125927-3508-465A-BC33-27598FE6839A">
                    <img src="https://greeneventstechnology.azureedge.net/cpl20/speakers/Duane_Newman.png" alt="Duane Newman" title="Duane Newman" />
                  </a>
                </div>
                <div class="thumb-caption">
                  <h5 class="thumb-title"><a href="http://codepalousa.com/SpeakerDetails/77125927-3508-465A-BC33-27598FE6839A">Duane Newman</a></h5>
                  <p class="thumb-meta"><br /></p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="gap"></div>
    </div>
